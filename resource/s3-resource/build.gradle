/*
 * Copyright 2015-2020 Ritense BV, the Netherlands.
 *
 * Licensed under EUPL, Version 1.2 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dockerCompose {
    projectName = "s3-resource"
    isRequiredBy(test)
    isRequiredBy(checkExtended)
    useComposeFiles.addAll("../../docker-resources/docker-compose-base-test.yml", "docker-compose-override.yml")
}

dependencies {
    api "com.ritense.valtimo:resource:$project.version"
    implementation project(":aws")
    implementation 'software.amazon.awssdk:s3'

    implementation "org.hibernate:hibernate-core"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"

    annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor"

    testImplementation group: "org.liquibase", name: "liquibase-core", version: "$liquibaseVersion"
    testImplementation group: "org.liquibase.ext", name: "liquibase-hibernate5", version: "$liquibaseVersion"
    testImplementation group: "com.mattbertolini", name: "liquibase-slf4j", version: "$liquibaseSlf4jVersion"

    testImplementation "org.springframework.security:spring-security-test"

    //Kotlin
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"

    testImplementation "com.ritense.valtimo:test-utils-common:$project.version"

    jar {
        enabled = true
        manifest {
            attributes("Implementation-Title": "Ritense S3 Resource - Spring boot starter")
            attributes("Implementation-Version": projectVersion)
        }
    }
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.baeldung.fatjar.Application'
    }
    archiveBaseName = 'all-in-one-jar'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

apply from: "gradle/publishing.gradle"